/***************************************************************************









****************************************************************************/

#ifndef STACK_H
#define STACK_H

#include <iostream>
#include <stdexcept>


struct Node
{
   public:
      //data member to store an item to be inserted into the stack

      //data member thats a pointer to a Node (next)
};


class Stack
{
   public:
      //data member: a pointer to an Node

      //data member: stkTop will point to the first Node

      Stack();
      size();
      clear();
      ~Stack();
      Stack(const Stack&);
      Stack& operator=(const Stack&);
      friend std::ostream& operator<< <>(std::ostream&, const Stack&);
      empty();
      top();
      push();
      pop();

   private:
};

Stack::Stack()
{
   stkTop = nullptr;
   stkSize = 0;
}

Stack::~Stack()
{
   delete[] stkArray;
}

Stack::clear()
{

}

Stack::Stack& operator=(const Stack&)
{
   if (this != &other)
   {
      clear();
      copylist(other);
      stkSize = other.stkSize;
   }

   return *this;
}

size_t Stack::size()
{
   return stkSize;
}

Stack::empty()
{
   
}

Stack::top()
{
}

Stack::push()
{
}

Stack::pop()
{
}
